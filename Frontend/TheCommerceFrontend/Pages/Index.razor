@page "/"
@using Newtonsoft.Json;
@inject IProductInterface productInterface
@inject NavigationManager navigationManager
<PageTitle>Index</PageTitle>

@if (isLoading)
{

   
    <p>Loading...</p>
}
else
{   
    @if(authenticated && role == "Admin")
    {
        <div class="row mb-4">
            <div class="col-6">
                Product  List
            </div>
            <div class="col-6 text-end">
                <a href="product/add" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> &nbsp; Add Product
                </a>
            </div>
        </div>
    }
    //display products
    @if (@products.Count==0)
    {
        <p><i>No Products Found !!</i></p>
    }
    else
    {
        //we have products
        <div class="row" > 
            @foreach(var product in products)
            {
                <div class="col-3 card shadow  m-2" @onclick="(()=>showProduct(product.ProductId))">
                    <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <h6 class="card-subtitle mb-3 text-muted">@product.Description</h6>
                        <div>

                            <span>@product.CategoryName </span>
                            <span>@product.Price.ToString("c0") </span>
                            <br />
                            @if (authenticated && role == "Admin")
                            {
                                <a href="product/update/@product.ProductId" class="p-4">update</a>

                                <button @onclick="@(()=>deleteProduct(product.ProductId))" class="btn btn-danger">Delete</button>
                            }
                        </div>

                    </div>
                </div>
            }
       
            
        </div>
    }
}






@code{
    private List<ProductDto> products= new List<ProductDto>();
    private bool isLoading = true;
    private string role { get; set; }
    private bool authenticated { get; set; }
    @* [CascadingParameter] *@
    @* public Task<AuthenticationState> _authState { get; set; } *@

    protected override async  Task OnInitializedAsync()
    {

        //set the list

        products = await productInterface.GetProductsAsync();
        isLoading = false;
        Console.WriteLine(products.Count);
        @* var authState = await _authState; *@
        @* role = authState.User.FindFirst("role")?.Value; *@
        @* authenticated = authState.User.Identity.IsAuthenticated; *@
        @* Console.WriteLine(authenticated); *@
    }


    private void showProduct(Guid id)
    {
        navigationManager.NavigateTo($"product/{id}");
    }

    private async Task deleteProduct(Guid id)
    {
        await productInterface.deleteProduct(id);
    }

}