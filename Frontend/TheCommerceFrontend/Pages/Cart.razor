@page "/cart"
@inject ICartInterface CartInterface
@if (cart.CartHeader==null || cart.CartDetails.Count()==0)
{
    <p><i> No Items in the Cart, Start Shopping!!!</i></p>
}
else
{
    <div class="card border mt-4 container">
        <div class="card-header bg-dark text-light ml-0 row ">
            <div class="col-6">
                <h3 class="text-success"><i class="bi bi-cart"></i> &nbsp; Shopping Cart</h3>
            </div>
            <div class="col-6 text-end">
                <a class="btn btn-outline-warning mt-2 btn-sm" href="">Continue Shopping</a>
            </div>
        </div>
        <div class="card-body">
            <div class=" d-none d-lg-block">
                <div class="row text-info">
                    <div class="col-lg-2">
                    </div>
                    <div class="col-lg-5">
                        Product Details
                    </div>
                    <div class="col-lg-2">
                        Price
                    </div>
                    <div class="col-lg-2">
                        Count
                    </div>
                    <div class="col-lg-1">
                    </div>
                </div>
            </div>
            <hr />
            @foreach (var item in cart.CartDetails)
            {
                <div class="row h-100">
                    <div class="col-4 col-md-2 text-center py-2">
                        <img src="@item.Product.ImageUrl" class="rounded" width="100%" />
                    </div>
                    <div class="col-8 col-md-5">
                        <h5>@item.Product.Name</h5>
                        <div style="font-size:11px;">@item.Product.Description</div>
                    </div>
                    <div class="col-3 col-md-2 pt-md-4" style="font-size:11px;">
                        <span style="font-size:17px;">@string.Format("{0:c}",item.Product.Price)</span>
                    </div>
                    <div class="col-3 col-md-2 pt-md-4 flex-row" style="font-size:11px;">
                        @*<span style="font-size:17px;">@item.Count</span>*@
                        <div class="flex-row">
                            <button class="btn btn-danger" @onclick="@(()=>decrement(item))">Minus</button>
                            <input @bind-value="@item.Count" />
                            <button class="btn btn-success" @onclick="@(()=>updateCount(item))">Add</button>
                    </div>
                    </div>
                    <div class="col-2 col-lg-1 p-0 pt-lg-4 text-center">
                        <a @onclick="@(()=>RemoveItem(item.CartDetailsId))">
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill text-danger" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                            </svg>
                        </a>
                    </div>
                    <hr />
                </div>
            }

        </div>
        <div class="row">
            @if (string.IsNullOrWhiteSpace(cart.CartHeader.CouponCode))
            {
                <div class="col-6">
                    <span>Coupon:</span>
                    <input @bind-value="code" />
                    <button type="submit" class="btn btn-sm btn-success" @onclick="ApplyCoupon"> Apply </button>
                </div>
            }else{
            <div class="col-6">
                <span>Coupon:</span>
                <input  @bind-value="cart.CartHeader.CouponCode" disabled/>
                <button type="submit" class="btn btn-sm btn-danger" @onclick="RemoveCoupon"> Remove </button>
            </div>
            }
            <div class="col-6 text-end">
                <span class="text-danger" style="font-size:21px;">  Order Total : @cart.CartHeader.CartTotal.ToString("c0") <br /></span>
                @if (cart.CartHeader.Discount>0)
                {
                    <span class="text-success"> Order Discount : @cart.CartHeader.Discount.ToString("c0")</span>
                }
            </div>
        </div>
        <hr/>
        <div class="row p-2">
            <div class="col-10"></div>
            <div class="col-2 ">
                <a class="btn btn-success" href="shipment">Place Order</a>
            </div>
        </div>
    </div>
}

@code {

    CartDto cart = new CartDto();
    [CascadingParameter]
    public Task<AuthenticationState> _authState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await _authState;
        var userID = authState.User.FindFirst("sub")?.Value;
        cart = await CartInterface.GetCartByUserId(Guid.Parse(userID));
    }



    private string code = "";
    private async Task ApplyCoupon()
    {
        var authState = await _authState;
        var userID = authState.User.FindFirst("sub")?.Value;

        var cartDto = new CartDto()
            {
                CartHeader = new CartHeaderDto()
                {
                    UserId = Guid.Parse(userID),
                    CouponCode = code
                },
                CartDetails = new List<CartDetailsDto>()
            };

        await CartInterface.ApplyCoupons(cartDto);
        cart = await CartInterface.GetCartByUserId(Guid.Parse(userID));

    }
    private async Task RemoveCoupon()
    {
        var authState = await _authState;
        var userID = authState.User.FindFirst("sub")?.Value;

        var cartDto = new CartDto()
            {
                CartHeader = new CartHeaderDto()
                {
                    UserId = Guid.Parse(userID),
                    CouponCode = " "
                },
                CartDetails = new List<CartDetailsDto>()

            };

        await CartInterface.ApplyCoupons(cartDto);
        cart = await CartInterface.GetCartByUserId(Guid.Parse(userID));
    }

    private async Task RemoveItem(Guid id)
    {
        await CartInterface.RemoveFromCart(id);
        var authState = await _authState;
        var userID = authState.User.FindFirst("sub")?.Value;
        cart = await CartInterface.GetCartByUserId(Guid.Parse(userID));
    }

    private async Task updateCount(CartDetailsDto item)
    {
        var authState = await _authState;
        var userID = authState.User.FindFirst("sub")?.Value;
        var cartDto = new CartDto()
            {
                CartHeader = new CartHeaderDto()
                {
                    UserId = Guid.Parse(userID),
                    CouponCode = ""
                },

                CartDetails = new List<CartDetailsDto>()
            {
                new CartDetailsDto()
                {
                    ProductId=item.ProductId,
                    Count=1
                }
            }
            };
        await CartInterface.AddToCart(cartDto);
        cart = await CartInterface.GetCartByUserId(Guid.Parse(userID));
    }

    private async Task decrement(CartDetailsDto item)
    {
        var authState = await _authState;
        var userID = authState.User.FindFirst("sub")?.Value;
        var cartDto = new CartDto()
            {
                CartHeader = new CartHeaderDto()
                {
                    UserId = Guid.Parse(userID),
                    CouponCode = ""
                },

                CartDetails = new List<CartDetailsDto>()
            {
                new CartDetailsDto()
                {
                    ProductId=item.ProductId,
                    Count=-1
                }
            }
            };
        await CartInterface.AddToCart(cartDto);
        cart = await CartInterface.GetCartByUserId(Guid.Parse(userID));
    }
}